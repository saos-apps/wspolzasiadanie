ls()
library(saos)
judgments <- search_judgments(all = "dobra osobiste",
courtType = "COMMON",
sortingField = "JUDGMENT_DATE",
sortingDirection = "DESC",
limit = 100)
class(judgments)
length(judgments)
str(judgments[[1]])
judgments[[1]]$judges
judgments[[1]]$judges
judgments[[1]]$judges[1]
judgments[[1]]$judges[2]
judgments[[1]]$judges[3]
judgments[[1]]$judges[4]
str(judgments[[1]])
judgments_details <- get_judgments(judgments)
judgments_details[1,]
judgments_details[1]
judges <- extract(judgments_details, "judges")
judges
str(judges)
type <- extract(judgments_details, "judgmentType")
str(type)
type
type[,2]
unique(type[,2])
date <- extract(judgments, "judgmentDate")
str(date)
vignette("saos", "saos")
judgments <- search_judgments(limit = 1, verbose = FALSE)
judgments
count_judgments()
count_judgments(courtType = "COMMON")
count_judgments(all="uniewinnienie")
count_judgments(all="winny")
count_judgments(all="niewinny")
count_judgments(all="niewinność")
count_judgments(all="zabójstwo")
count_judgments(all="łapówka")
count_judgments(all="łapówki")
count_judgments(all="wynagrodzenie")
count_judgments(all="daads")
count_judgments(all="handel")
j <- search_judgments(verbose = FALSE)
length(j)
j <- search_judgments(verbose = TRUE)
length(j)
j <- search_judgments(limit = 500, verbose = FALSE)
length(j)
system.time(j <- search_judgments(limit = 500, force = TRUE, verbose = FALSE))
length(j)
object.size(j)
print_query()
print_query(judgmentDateFrom = "2014-01-01")
print_query(judgmentDateFrom = "2014-01-01",judgeName = "MMM")
print_query(judgmentDateFrom = "2014-01-01",judgeName = "MMM",judgmentTypes = c("dec","sent"))
print_query(judgmentDateFrom = "2014-01-01",judgeName = "MMM",judgmentTypes = c("DECISION","SENTENCE"))
print_query(all = list(include = "dobra osobiste",
exclude = "dobra publiczne"))
p<-print_query(all = list(include = "dobra osobiste",
exclude = "dobra publiczne"))
print(p\)
print(p)
cat(p)
print_query(all = "dobra")
print_query(all = "dobra osobiste")
print_query(all = "dobra OR osobiste")
print_query(all = "\"dobra osobiste \"")
print_query(all = "-dobra -osobiste")
print_query(list(include = c("dobra osobiste", "kodeks karny"),
exclude = "kodeks cywilny"))
?seq_along
words <- c("spadek", "syn", "córka", "dług")
seq_along(words)
for (i in seq_along(words)){
query <- paste(c(words[i], paste0("-", words[-i])), collapse = " ")
print(count_judgments(all = query))
}
for (i in seq_along(words)){
print(count_judgments(all = list(include = words[i],
exclude = words[-i])))
}
print_query(judgmentTypes = "DECISION")
print_query(judgmentTypes = c("RESOLUTION", "REASONS"))
j <- search_judgments(limit = 10, verbose = FALSE)
judgments <- get_judgments(j, verbose = FALSE)
class(judgments)
judgments <- get_judgments(1:10, verbose = FALSE)
class(judgments)
judgments
judgments <- get_judgments(1:10, verbose = FALSE)
class(judgments)
str(judgments)
lastmonth <- get_dump_judgments(judgmentStartDate = Sys.Date() - 30,
judgmentEndDate = Sys.Date(),
verbose = FALSE)
time(lastmonth <- get_dump_judgments(judgmentStartDate = Sys.Date() - 30,
judgmentEndDate = Sys.Date(),
verbose = FALSE))
class(lastmonth)
length(lastmonth)
dim(lastmonth)
levels(lastmonth)
str(lastmonth)
str(lastmonth[[1]])
get_dump_courts(simplify = T)
courts<-get_dump_courts(simplify = T)
length(courts)
ncol(courts)
nrow(courts)
courts<-get_dump_courts(simplify = F)
class(courts)
courts[[1]]
courts<-get_dump_courts(simplify = T)
courts[1,]
get_dump_scChambers(simplify = T)
scch<-get_dump_scChambers(simplify = T)
ncol(scch)
nrow(scch)
scch
enr<-get_dump_enrichments(simplify = T)
nrow(enr)
ncol(enr)
enr
enr[1:5,1]
enr[1:5,2]
enr[1:5,3]
enr[1:5,4]
enr[1:5,5]
colnames(enr)
class(lastmonth)
abc<-search_judgments(courtType = "COMMON")
ext<-extract(abc,element = "judges"
)
ext
ext<-extract(abc,element = "judgmentType")
ext
ls()
library(yhatr)
df<-data.frame(lat=39.28,lon=-76.61,radius=60)
df
q()
library(yhatr)
df
df$lat +5
yhat.config  <- c(
username="pat.skowron@gmail.com",
apikey="5948932f2fdeb315a61fc31d981a7187",
env="http://cloud.yhathq.com/")
yhat.predict("pollutant",df)
sudo apt-cache search curl
q()
regexec(names.male[1],temp2$name[1])
setwd("/DokumentyWin7/praca/ICM/SAOS/saos-apps/my-apps/app-net")
load("/Windows7c/Users/Patryk/Documents/praca/ICM/SAOS/saos-apps/my-apps/workspace.RData")
regexec(names.male[1],temp2$name[1])
library(httr)
url<-"http://www.behindthename.com/names/gender/masculine/usage/polish"
html2=GET(url)
cont<-content(html2,as="text")
parsed.html=htmlParse(cont,asText=T)
names.male<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.male<-data.frame(name=unlist(lapply(names.male,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.male<-tolower(names.male[,1])
names.male<-names.male[-which(names.male=="maria")]
url<-"http://www.behindthename.com/names/gender/feminine/usage/polish"
html2=GET(url)
cont<-content(html2,as="text")
parsed.html=htmlParse(cont,asText=T)
names.female<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.female<-data.frame(name=unlist(lapply(names.female,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.female<-tolower(names.female[,1])
cont<-content(html2,as="text")
names.male<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
require(xml)
require(XML)
names.male<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
parsed.html=htmlParse(cont,asText=T)
names.male<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.male<-data.frame(name=unlist(lapply(names.male,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.male<-tolower(names.male[,1])
names.male<-names.male[-which(names.male=="maria")]
url<-"http://www.behindthename.com/names/gender/feminine/usage/polish"
html2=GET(url)
cont<-content(html2,as="text")
parsed.html=htmlParse(cont,asText=T)
names.female<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.female<-data.frame(name=unlist(lapply(names.female,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.female<-tolower(names.female[,1])
regexec(names.male[1],temp2$name[1])
names.male[1]
temp2$name[1]
temp2$name
str(temp)
temp2<-temp
regexec(names.male[1],temp2$name[1])
temp2$name[1]
names.male[1]
names.male[2]
url<-"http://www.behindthename.com/names/gender/masculine/usage/polish"
html2=GET(url)
cont<-content(html2,as="text")
parsed.html=htmlParse(cont,asText=T)
names.male<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.male<-data.frame(name=unlist(lapply(names.male,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.male<-tolower(names.male[,1])
names.male<-names.male[-which(names.male=="maria")]
url<-"http://www.behindthename.com/names/gender/feminine/usage/polish"
html2=GET(url)
cont<-content(html2,as="text")
parsed.html=htmlParse(cont,asText=T)
names.female<-xpathSApply(parsed.html,"//div/b/a",xmlValue)
names.female<-data.frame(name=unlist(lapply(names.female,function(x) as.character(unlist(strsplit(x," "))[1]))))
names.female<-tolower(names.female[,1])
regexec(names.male[1],temp2$name[1],ignore.case = T)
regexec(names.male[1],temp2$name[1],ignore.case = T)[[1]]
regexec(names.male[1],temp2$name[1],ignore.case = T)[[1]][1]
names.male[1]
t<-"asddssdgadalBeRtqweqwe"
regexec(names.male[1],t,ignore.case = T)[[1]][1]
t<-"adalBeRtqweqwe"
regexec(names.male[1],t,ignore.case = T)[[1]]
regexec(names.male[1],t,ignore.case = T)[[1]][1]
regexec(names.male[1],t,ignore.case = T)[[1]][1]>0
which(regexec(names.male[1],temp2$name,ignore.case = T)[[1]][1]>0)
which(regexec(names.male[2],temp2$name,ignore.case = T)[[1]][1]>0)
names.male[1:10]
names.male[20:30]
which(temp2$name=="adam")
head(temp2)
which(tolower(temp2$name)=="adam")
which(regexec(names.male[2],temp2$name,ignore.case = T)[[1]][1]>0)
regexec(names.male[2],temp2$name,ignore.case = T)[[1]][1]>0
regexec(names.male[2],temp2$name[38],ignore.case = T)[[1]][1]>0
regexec(names.male[2],temp2$name,ignore.case = T)[[1]][1]>0
sapply(temp2$name,function(x) regexec(names.male[2],x,ignore.case = T)[[1]][1]>0)
which(sapply(temp2$name,function(x) regexec(names.male[2],x,ignore.case = T)[[1]][1]>0)==TRUE)
temp2$name[which(sapply(temp2$name,function(x) regexec(names.male[2],x,ignore.case = T)[[1]][1]>0)==TRUE)]
sapply(names.male,function(x) which(sapply(temp2$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE))
temp<-sapply(names.male[1:10],function(x) which(sapply(temp2$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE))
temp
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp2$name[1:1000],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
#  temp2$sex[w]
w
})
tlist$adam
str(temp)
temp<-as.data.frame(t(sapply(seq(nrow(j.names)),function(x) {t<-strsplit(j.names$name[x]," ");c(unlist(t)[1],unlist(t)[2])})))
names(temp)<-c("name","surname")
temp$sex<-NA
str(temp)
sapply(names.male,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"F")
sapply(names.male,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"F")
left<-which(is.na(temp$sex))
left
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp$name[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<-"M"
})
left
temp$name[left]
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp$name[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<-"M"
})
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<-"M"
})
temp$name[1:10]
options(stringsAsFactors = F)
j.names<-data.frame(name=as.character(unique(judges$JudgeName)))
temp<-as.data.frame(t(sapply(seq(nrow(j.names)),function(x) {t<-strsplit(j.names$name[x]," ");c(unlist(t)[1],unlist(t)[2])})))
names(temp)<-c("name","surname")
temp$sex<-NA
sapply(names.male,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"F")
sapply(names.male,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"F")
left<-which(is.na(temp$sex))
left
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<-"M"
})
which(is.na(temp$sex))
tlist<-sapply(names.male[1:10],function(x) {
w<-which(sapply(temp$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
which(is.na(temp$sex))
length(which(is.na(temp$sex)))
length(left)
left<-which(is.na(temp$sex))
tlist<-sapply(names.male,function(x) {
w<-which(sapply(temp$name,function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
temp$sex<-NA
sapply(names.male,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$name)==x)]<<-"F")
sapply(names.male,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"F")
left<-which(is.na(temp$sex))
tlist<-sapply(names.male,function(x) {
w<-which(sapply(temp$name[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
str(left)
str(which(is.na(temp$sex)))
left<-which(is.na(temp$sex))
tlist<-sapply(names.male,function(x) {
w<-which(sapply(temp$surname[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
left<-which(is.na(temp$sex))
tlist<-sapply(names.female,function(x) {
w<-which(sapply(temp$name[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
left<-which(is.na(temp$sex))
tlist<-sapply(names.female,function(x) {
w<-which(sapply(temp$surname[left],function(y) regexec(x,y,ignore.case = T)[[1]][1]>0)==TRUE)
temp$sex[w]<<-"M"
})
left<-which(is.na(temp$sex))
str(left)
temp$sex[which(subLast(temp$name)=="a" & is.na(temp$sex) & nchar(temp$name)>1)]<-"F"
subLast <- function(x){
tolower(substr(x, nchar(x), nchar(x)))
}
temp$name<-sub("/*[.]/*","",temp$name,ignore.case = T)
temp$surname<-sub("/*[.]/*","",temp$surname,ignore.case = T)
temp$sex[which(subLast(temp$name)=="a" & is.na(temp$sex) & nchar(temp$name)>1)]<-"F"
temp$sex[which(subLast(temp$surname)=="a" & is.na(temp$sex)  & nchar(temp$name)>1)]<-"F"
left<-which(is.na(temp$sex))
str(left)
temp$name<-sub("/*-/*","",temp$name,ignore.case = T)
temp$name<-sub("/*sso/*","",temp$name,ignore.case = T)
temp$name<-sub("/*ssa/*","",temp$name,ignore.case = T)
temp$name<-sub("/*del/*","",temp$name,ignore.case = T)
temp$surname<-sub("/*-/*","",temp$surname,ignore.case = T)
temp$surname<-sub("/*sso/*","",temp$surname,ignore.case = T)
temp$surname<-sub("/*ssa/*","",temp$surname,ignore.case = T)
temp$surname<-sub("/*del/*","",temp$surname,ignore.case = T)
sapply(names.male,function(x) temp$sex[which(tolower(temp$name)==x  & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$name)==x  & is.na(temp$sex))]<<-"F")
sapply(names.male,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"F")
temp$sex[which(subLast(temp$name)=="a" & is.na(temp$sex)  & nchar(temp$name)>1)]<-"F"
temp$sex[which(subLast(temp$surname)=="a" & is.na(temp$sex)  & nchar(temp$name)>1)]<-"F"
left<-which(is.na(temp$sex))
str(left)
temp$name<-sub("/*so/*","",temp$name,ignore.case = T)
temp$name<-sub("/*sa/*","",temp$name,ignore.case = T)
temp$surname<-sub("/*so/*","",temp$surname,ignore.case = T)
temp$surname<-sub("/*sa/*","",temp$surname,ignore.case = T)
sapply(names.male,function(x) temp$sex[which(tolower(temp$name)==x  & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$name)==x  & is.na(temp$sex))]<<-"F")
sapply(names.male,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"M")
sapply(names.female,function(x) temp$sex[which(tolower(temp$surname)==x & is.na(temp$sex))]<<-"F")
left<-which(is.na(temp$sex))
str(left)
temp$sex[which(subLast(temp$name)=="a" & is.na(temp$sex)  & nchar(temp$name)>1)]<-"F"
temp$sex[which(subLast(temp$surname)=="a" & is.na(temp$sex)  & nchar(temp$name)>1)]<-"F"
left<-which(is.na(temp$sex))
str(left)
temp2[left,]
save.image("/Windows7c/Users/Patryk/Documents/praca/ICM/SAOS/saos-apps/my-apps/workspace.RData")
